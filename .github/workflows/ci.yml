name: CI
on: push
jobs:
  check-theater:
    name: Check Theater
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./theater"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.13.0
          cache: "yarn"
          cache-dependency-path: ./theater/yarn.lock

      - name: Install Dependencies
        run: yarn install

      - name: Check Licensure
        run: yarn run check-licensure

      - name: Run Linter
        run: yarn lint --max-warnings=0

      - name: Run Test Suite
        run: yarn run jest --ci --passWithNoTests

      - name: Check Type Correctness
        run: yarn run tsc --noEmit

      - name: Check Formatting
        run: yarn prettier --check .

  check-reel:
    name: Check Reel
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./reel"
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: reel_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      MIX_ENV: test
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-elixir@v1
        with:
          otp-version: 24.3.3
          elixir-version: 1.12
      - uses: actions/cache@v1
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-mix-x
      - name: Retrieve Mix Build Cache
        uses: actions/cache@v1
        id: mix-build-cache
        with:
          path: _build/test/lib
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-build-${{ github.event.pull_request.base.sha }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-build-${{ github.event.pull_request.base.sha }}-
            ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-build-
      - run: mix local.rebar --force
      - run: mix local.hex --force
      - run: mix deps.get
      - run: mix deps.compile

      - name: Compile
        id: compile
        run: mix compile --warnings-as-errors

      - name: Test
        id: test
        run: mix test --warnings-as-errors

      - name: Format
        id: format
        run: mix format --check-formatted

      - name: Credo
        id: credo
        run: mix credo

      - name: Sobelow
        id: sobelow
        run: mix sobelow --config --exit

  deploy-reel-production:
    name: Deploy Reel
    if: github.ref == 'refs/heads/main'
    needs: [check-reel, check-theater]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./reel"
    steps:
      - uses: actions/checkout@v2
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-theater-preview:
    name: Deploy Theater Preview
    if: github.ref != 'refs/heads/main'
    needs: [check-reel, check-theater]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./theater"
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-theater-production:
    name: Deploy Theater Production
    if: github.ref == 'refs/heads/main'
    needs: [check-reel, check-theater, deploy-reel-production]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: --prod
          github-comment: false
